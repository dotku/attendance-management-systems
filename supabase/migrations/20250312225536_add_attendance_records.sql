-- Create attendance_records table
CREATE TABLE IF NOT EXISTS public.attendance_records (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    department text NOT NULL,
    unit text NOT NULL,
    name text NOT NULL,
    military_rank text,
    start_date date NOT NULL,
    start_time time NOT NULL,
    end_date date NOT NULL,
    end_time time NOT NULL,
    location text NOT NULL,
    reason text NOT NULL,
    contact text,
    approver text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    user_id uuid REFERENCES auth.users(id)
);

-- Add RLS (Row Level Security) policies
ALTER TABLE public.attendance_records ENABLE ROW LEVEL SECURITY;

-- Allow users to view all records
CREATE POLICY "Users can view all attendance records"
    ON public.attendance_records
    FOR SELECT
    USING (true);

-- Allow authenticated users to insert their own records
CREATE POLICY "Users can insert their own records"
    ON public.attendance_records
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own records
CREATE POLICY "Users can update their own records"
    ON public.attendance_records
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own records
CREATE POLICY "Users can delete their own records"
    ON public.attendance_records
    FOR DELETE
    USING (auth.uid() = user_id);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_attendance_records_department ON public.attendance_records(department);
CREATE INDEX IF NOT EXISTS idx_attendance_records_unit ON public.attendance_records(unit);
CREATE INDEX IF NOT EXISTS idx_attendance_records_name ON public.attendance_records(name);
CREATE INDEX IF NOT EXISTS idx_attendance_records_start_date ON public.attendance_records(start_date);
CREATE INDEX IF NOT EXISTS idx_attendance_records_user_id ON public.attendance_records(user_id);

-- Insert mock data
INSERT INTO public.attendance_records 
    (department, unit, name, military_rank, start_date, start_time, end_date, end_time, location, reason, contact, approver)
VALUES
    ('公司1', '1连', '张一', '上尉', '2023-12-18', '09:00', '2023-12-18', '18:00', '广州市', '看病', '11111111111', '王五'),
    ('公司1', '2连', '张三', '中尉', '2023-12-18', '13:30', '2023-12-18', '18:00', '广州市', '购物', NULL, NULL),
    ('公司1', '3连', '张三', '少尉', '2023-12-18', '09:00', '2023-12-18', '18:00', '广州市', '见亲友', NULL, NULL),
    ('公司1', '4连', '张四', '上士', '2023-12-18', '09:00', '2023-12-18', '18:00', '广州市', '购物', NULL, NULL),
    ('公司2', '1连', '张七', '中士', '2023-12-09', '09:00', '2023-12-09', '18:00', '医院', '购物', NULL, NULL),
    ('公司2', '2连', '张八', '下士', '2023-12-10', '09:00', '2023-12-10', '18:00', '长宁镇', '购物', NULL, NULL);

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at timestamp
CREATE TRIGGER update_attendance_records_updated_at
    BEFORE UPDATE ON public.attendance_records
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
